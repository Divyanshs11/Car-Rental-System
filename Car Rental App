import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
class Car {
    private String carId;
    private String brand;
    private String model;
    private double pricePerDay;
    private boolean status; // true if available, false if rented
    private List<Integer> ratings; // Stores ratings for each car
    public Car(String carId, String brand, String model, double pricePerDay) {
        this.carId = carId;
        this.brand = brand;
        this.model = model;
        this.pricePerDay = pricePerDay;
        this.status = true; // Initially available
        this.ratings = new ArrayList<>(); // Initialize ratings list
    }
    public String getCarId() {
        return carId;
    }
    public String getBrand() {
        return brand;
    }
    public String getModel() {
        return model;
    }
    public double calculatePrice(int rentalDays) {
        return pricePerDay * rentalDays;
    }
    public boolean isAvailable() {
        return status;
    }
    public void rent() {
        status = false; // Mark as rented
    }
    public void returnCar() {
        status = true; // Mark as available
    }
    public void addRating(int rating) {
        ratings.add(rating);
    }
    public double getAverageRating() {
        return ratings.stream().mapToInt(Integer::intValue).average().orElse(0.0);
    }
}
class Customer {
    private String customerId;
    private String name;
    public Customer(String customerId, String name) {
        this.customerId = customerId;
        this.name = name;
    }
    public String getCustomerId() {
        return customerId;
    }
    public String getName() {
        return name;
    }
}
class Rental {
    private Car car;
    private Customer customer;
    private int days;
    public Rental(Car car, Customer customer, int days) {
        this.car = car;
        this.customer = customer;
        this.days = days;
    }
    public Car getCar() {
        return car;
    }
    public Customer getCustomer() {
        return customer;
    }
    public int getDays() {
        return days;
    }
}
class Management {
    private List<Car> cars;
    private List<Customer> customers;
    private List<Rental> rentals;
    public Management() {
        cars = new ArrayList<>();
        customers = new ArrayList<>();
        rentals = new ArrayList<>();
    }
    public void addCar(Car car) {
        cars.add(car);
    }
    public void addCustomer(String customerId, String name) {
        customers.add(new Customer(customerId, name));
    }
    public List<Car> getCars() {
        return cars;
    }
    public List<Rental> getRentals() {
        return rentals;
    }
    public List<String> getAvailableCarsWithRatings() {
        List<String> availableCarsWithRatings = new ArrayList<>();
        for (Car car : cars) {
            if (car.isAvailable()) {
                double avgRating = car.getAverageRating();
                availableCarsWithRatings.add(car.getCarId() + " - " + car.getBrand() + " " + car.getModel() +
                        " (" + String.format("%.1f", avgRating) + " stars)");
            }
        }
        return availableCarsWithRatings;
    }
    public void rentCar(Car car, Customer customer, int days) {
        if (car.isAvailable()) {
            car.rent();
            rentals.add(new Rental(car, customer, days));
        } else {
            JOptionPane.showMessageDialog(null, "Car is not available for rent.");
        }
    }
    public boolean returnCar(String carId) {
        for (Rental rental : rentals) {
            if (rental.getCar().getCarId().equals(carId)) {
                rental.getCar().returnCar(); // Mark the car as available
                rentals.remove(rental); // Remove the rental record
                return true; // Successfully returned
            }
        }
        return false; // Car was not rented
    }
    public void showRentalInformation(Customer customer, Car car, int rentalDays) {
        double totalPrice = car.calculatePrice(rentalDays);
        String message = "== Rental Information ==\n" +
                "Customer ID: " + customer.getCustomerId() + "\n" +
                "Customer Name: " + customer.getName() + "\n" +
                "Car: " + car.getBrand() + " " + car.getModel() + "\n" +
                "Rental Days: " + rentalDays + "\n" +
                "Total Price: â‚¹" + totalPrice + "\n";
        JOptionPane.showMessageDialog(null, message);
    }
    public void collectFeedback(String customerId, String carId, int rating) {
        for (Car car : cars) {
            if (car.getCarId().equals(carId)) {
                car.addRating(rating); // Add the rating to the car
                break;
            }
        }
        JOptionPane.showMessageDialog(null, "Thank you for your feedback!");
    }
}
public class CarRentalApp {
    public static void main(String[] args) {
        Management rentalSystem = new Management();
        rentalSystem.addCar(new Car("C001", "Maruti Suzuki", "Swift", 60.0));
        rentalSystem.addCar(new Car("C002", "Tata", "Harrier", 70.0));
        rentalSystem.addCar(new Car("C003", "Mahindra", "Thar", 150.0));
        rentalSystem.addCar(new Car("C004", "Honda", "City", 130.0));
        rentalSystem.addCar(new Car("C005", "Toyota", "Innova", 160.0));
        rentalSystem.addCar(new Car("C006", "Hyundai", "Creta", 90.0));
        JFrame frame = new JFrame("Car Rental System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 300);
        frame.setLayout(new FlowLayout());
        JButton rentButton = new JButton("Rent a Car");
        JButton returnButton = new JButton("Return a Car");
        JButton viewRentalsButton = new JButton("View Current Rentals");
        frame.add(rentButton);
        frame.add(returnButton);
        frame.add(viewRentalsButton);
        rentButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String customerName = JOptionPane.showInputDialog("Enter your name:");
                if (customerName != null && !customerName.trim().isEmpty()) {
                    StringBuilder carList = new StringBuilder("Available Cars:\n");
                    for (String carInfo : rentalSystem.getAvailableCarsWithRatings()) {
                        carList.append(carInfo).append("\n");
                    }
                    String carId = JOptionPane.showInputDialog(carList + "\nEnter the car ID you want to rent:");
                    if (carId != null && !carId.trim().isEmpty()) {
                        int rentalDays = 0;
                        boolean validDays = false;
                        while (!validDays) {
                            String daysInput = JOptionPane.showInputDialog("Enter the number of days for rental:");
                            if (daysInput != null) {
                                try {
                                    rentalDays = Integer.parseInt(daysInput);
                                    if (rentalDays > 0) {
                                        validDays = true;
                                    } else {
                                        JOptionPane.showMessageDialog(frame, "Please enter a positive number for days.");
                                    }
                                } catch (NumberFormatException ex) {
                                    JOptionPane.showMessageDialog(frame, "Invalid input. Please enter a number.");
                                }
                            } else {
                                return; // Cancelled
                            }
                        }
                        String customerId = "CUS" + (rentalSystem.getAvailableCarsWithRatings().size() + 1);
                        rentalSystem.addCustomer(customerId, customerName);
                        Car selectedCar = null;
                        for (Car car : rentalSystem.getCars()) { // Use the new getter here
                            if (car.getCarId().equals(carId) && car.isAvailable()) {
                                selectedCar = car;
                                break;
                            }
                        }
                        if (selectedCar != null) {
                            rentalSystem.showRentalInformation(new Customer(customerId, customerName), selectedCar, rentalDays);
                            int confirmation = JOptionPane.showConfirmDialog(frame, "Do you want to proceed with the rental?",
                                    "Confirm Rental", JOptionPane.YES_NO_OPTION);
                            if (confirmation == JOptionPane.YES_OPTION) {
                                rentalSystem.rentCar(selectedCar, new Customer(customerId, customerName), rentalDays);
                                JOptionPane.showMessageDialog(frame, "Car rented successfully.");
                            } else {
                                JOptionPane.showMessageDialog(frame, "Rental canceled.");
                            }
                        } else {
                            JOptionPane.showMessageDialog(frame, "Invalid car selection or car not available for rent.");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(frame, "Customer name cannot be empty.");
                }
            }
        });
        returnButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String carId = JOptionPane.showInputDialog("Enter the car ID to return:");
                if (carId != null && !carId.trim().isEmpty()) {
                    if (rentalSystem.returnCar(carId)) {
                        JOptionPane.showMessageDialog(frame, "Car returned successfully. Please rate your experience (1-5).");
                        String ratingInput = JOptionPane.showInputDialog("Enter your rating (1-5):");
                        if (ratingInput != null) {
                            try {
                                int rating = Integer.parseInt(ratingInput);
                                if (rating >= 1 && rating <= 5) {
                                    rentalSystem.collectFeedback("Customer ID", carId, rating);
                                } else {
                                    JOptionPane.showMessageDialog(frame, "Rating should be between 1 and 5.");
                                }
                            } catch (NumberFormatException ex) {
                                JOptionPane.showMessageDialog(frame, "Invalid rating input.");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(frame, "Car not found or was not rented.");
                    }
                }
            }
        });
        viewRentalsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                StringBuilder rentalsList = new StringBuilder("Current Rentals:\n");
                for (Rental rental : rentalSystem.getRentals()) {
                    rentalsList.append("Car ID: ").append(rental.getCar().getCarId())
                            .append(" - ").append(rental.getCar().getBrand()).append(" ").append(rental.getCar().getModel())
                            .append("\nCustomer Name: ").append(rental.getCustomer().getName())
                            .append("\nRental Days: ").append(rental.getDays()).append("\n\n");
                }
                if (rentalSystem.getRentals().isEmpty()) {
                    JOptionPane.showMessageDialog(frame, "No cars are currently rented.");
                } else {
                    JOptionPane.showMessageDialog(frame, rentalsList.toString());
                }
            }
        });
        frame.setVisible(true);
    }
}
